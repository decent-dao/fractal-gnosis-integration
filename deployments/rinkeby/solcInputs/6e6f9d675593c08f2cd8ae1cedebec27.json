{
  "language": "Solidity",
  "sources": {
    "contracts/GnosisWrapper.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.0;\n\nimport \"@fractal-framework/core-contracts/contracts/ModuleBase.sol\";\nimport \"./IGnosisWrapper.sol\";\n\ncontract GnosisWrapper is ModuleBase {\n    address public gnosisSafe;\n\n    function initialize(address _accessControl, address _gnosisSafe)\n        public\n        initializer\n    {\n        __initBase(_accessControl, msg.sender, \"Wrapper Module\");\n        _registerInterface(type(IGnosisWrapper).interfaceId);\n        gnosisSafe = _gnosisSafe;\n    }\n}\n"
    },
    "@fractal-framework/core-contracts/contracts/ModuleBase.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\";\r\nimport \"./interfaces/IModuleBase.sol\";\r\n\r\n/// @notice An abstract contract to be inherited by module contracts\r\nabstract contract ModuleBase is IModuleBase, UUPSUpgradeable, ERC165Storage {\r\n    IDAOAccessControl public accessControl;\r\n    address public moduleFactory;\r\n    string internal _name;\r\n\r\n    /// @notice Requires that a function caller has the associated role\r\n    modifier authorized() {\r\n        if (\r\n            !accessControl.actionIsAuthorized(\r\n                msg.sender,\r\n                address(this),\r\n                msg.sig\r\n            )\r\n        ) {\r\n            revert NotAuthorized();\r\n        }\r\n        _;\r\n    }\r\n\r\n    /// @notice Function for initializing the contract that can only be called once\r\n    /// @param _accessControl The address of the access control contract\r\n    /// @param _moduleFactory The address of the factory deploying the module\r\n    /// @param __name Human readable string of the module name\r\n    function __initBase(address _accessControl, address _moduleFactory, string memory __name)\r\n        internal\r\n        onlyInitializing\r\n    {\r\n        accessControl = IDAOAccessControl(_accessControl);\r\n        moduleFactory = _moduleFactory;\r\n        _name = __name;\r\n        __UUPSUpgradeable_init();\r\n        _registerInterface(type(IModuleBase).interfaceId);\r\n    }\r\n\r\n    /// @dev Applies authorized modifier so that an upgrade require the caller to have the correct role\r\n    /// @param newImplementation The address of the new implementation contract being upgraded to\r\n    function _authorizeUpgrade(address newImplementation)\r\n        internal\r\n        override\r\n        authorized\r\n    {}\r\n\r\n    /// @notice Returns the module name\r\n    /// @return The module name\r\n    function name() public view virtual returns (string memory) {\r\n      return _name;\r\n    }\r\n}\r\n"
    },
    "contracts/IGnosisWrapper.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.0;\n\ninterface IGnosisWrapper {\n    function initialize(address _accessControl, address _gnosisSafe) external;\n    function gnosisSafe() external view returns(address);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165Storage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Storage.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC165.sol\";\n\n/**\n * @dev Storage based implementation of the {IERC165} interface.\n *\n * Contracts may inherit from this and call {_registerInterface} to declare\n * their support of an interface.\n */\nabstract contract ERC165Storage is ERC165 {\n    /**\n     * @dev Mapping of interface ids to whether or not it's supported.\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev Registers the contract as an implementer of the interface defined by\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n     * registering its interface id is not required.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * Requirements:\n     *\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n     */\n    function _registerInterface(bytes4 interfaceId) internal virtual {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n"
    },
    "@fractal-framework/core-contracts/contracts/interfaces/IModuleBase.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IDAOAccessControl.sol\";\r\n\r\ninterface IModuleBase {\r\n    error NotAuthorized();\r\n\r\n    /// @return IDAOAccessControl The Access control interface\r\n    function accessControl() external view returns (IDAOAccessControl);\r\n\r\n    /// @return string The string \"Name\"\r\n    function name() external view returns (string memory);\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822ProxiableUpgradeable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@fractal-framework/core-contracts/contracts/interfaces/IDAOAccessControl.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.0;\r\n\r\ninterface IDAOAccessControl {\r\n    struct RoleData {\r\n        mapping(address => bool) members;\r\n        string adminRole;\r\n    }\r\n\r\n    error UnequalArrayLengths();\r\n    error MissingRole(address account, string role);\r\n    error OnlySelfRenounce();\r\n\r\n    event ActionRoleAdded(\r\n        address target,\r\n        string functionDesc,\r\n        bytes4 encodedSig,\r\n        string role\r\n    );\r\n    event ActionRoleRemoved(\r\n        address target,\r\n        string functionDesc,\r\n        bytes4 encodedSig,\r\n        string role\r\n    );\r\n    event RoleAdminChanged(\r\n        string role,\r\n        string previousAdminRole,\r\n        string adminRole\r\n    );\r\n    event RoleGranted(string role, address account, address admin);\r\n    event RoleRevoked(string role, address account, address admin);\r\n\r\n    /// @notice Initialize DAO action and role permissions\r\n    /// @param dao Address to receive DAO role\r\n    /// @param roles What permissions are assigned to\r\n    /// @param roleAdmins Roles which have the ability to remove or add members\r\n    /// @param members Addresses to be granted the specified roles\r\n    /// @param targets Contract addresses for actions to be defined on\r\n    /// @param functionDescs Function descriptions used to define actions\r\n    /// @param actionRoles Roles being granted permission for an action\r\n    function initialize(\r\n        address dao,\r\n        string[] memory roles,\r\n        string[] memory roleAdmins,\r\n        address[][] memory members,\r\n        address[] memory targets,\r\n        string[] memory functionDescs,\r\n        string[][] memory actionRoles\r\n    ) external;\r\n\r\n    /// @notice Grants roles to the specified addresses and defines admin roles\r\n    /// @notice This function can only be called by the DAO\r\n    /// @param roles The roles being granted\r\n    /// @param roleAdmins The roles being granted as admins of the specified of roles\r\n    /// @param members Addresses being granted each specified role\r\n    function daoGrantRolesAndAdmins(\r\n        string[] memory roles,\r\n        string[] memory roleAdmins,\r\n        address[][] memory members\r\n    ) external;\r\n\r\n    /// @notice Grants roles to the specified addresses\r\n    /// @notice This function can only be called by the DAO\r\n    /// @param roles The roles being granted\r\n    /// @param members Addresses being granted each specified role\r\n    function daoGrantRoles(string[] memory roles, address[][] memory members)\r\n        external;\r\n\r\n    /// @notice Authorizes roles to execute the specified actions\r\n    /// @notice This function can only be called by the DAO\r\n    /// @param targets The contract addresses that the action functions are implemented on\r\n    /// @param functionDescs The function descriptions used to define the actions\r\n    /// @param roles Roles being granted permission for an action\r\n    function daoAddActionsRoles(\r\n        address[] memory targets,\r\n        string[] memory functionDescs,\r\n        string[][] memory roles\r\n    ) external;\r\n\r\n    /// @notice Removes autorization for roles to execute the specified actions\r\n    /// @notice This function can only be called by the DAO\r\n    /// @param targets The contract addresses that the action functions are implemented on\r\n    /// @param functionDescs The function description used to define the actions\r\n    /// @param roles Roles that action permissions are being removed on\r\n    function daoRemoveActionsRoles(\r\n        address[] memory targets,\r\n        string[] memory functionDescs,\r\n        string[][] memory roles\r\n    ) external;\r\n\r\n    /// @notice Grants a role to the specified address\r\n    /// @notice This function can only be called by an admin of the specified role\r\n    /// @param role The role being granted\r\n    /// @param account The address being granted the specified role\r\n    function adminGrantRole(string memory role, address account)\r\n        external;\r\n\r\n    /// @notice Revokes a role from the specified address\r\n    /// @notice This function can only be called by an admin of the specified role\r\n    /// @param role The role being revoked\r\n    /// @param account The address the role is being revoked from\r\n    function adminRevokeRole(string memory role, address account)\r\n        external;\r\n\r\n    /// @notice Enables an address to remove one of its own roles\r\n    /// @notice This function can only be called by the account specified\r\n    /// @param role The role being renounced\r\n    /// @param account The address renouncing the role\r\n    function userRenounceRole(string memory role, address account) external;\r\n\r\n    /// @notice Checks if a caller has the permissions to execute the specific action\r\n    /// @param caller Address attempting to execute the action\r\n    /// @param target Contract address corresponding to the action\r\n    /// @param sig The function signature used to define the action\r\n    function actionIsAuthorized(\r\n        address caller,\r\n        address target,\r\n        bytes4 sig\r\n    ) external view returns (bool isAuthorized);\r\n\r\n    /// @notice Returns the roles autorized to execute the specified action\r\n    /// @param target Contract address corresponding to the action\r\n    /// @param functionDesc The function description used to define the action\r\n    function getActionRoles(address target, string memory functionDesc)\r\n        external\r\n        view\r\n        returns (string[] memory roles);\r\n\r\n    /// @notice Checks if a specific role is authorized for an action\r\n    /// @param role Role that authorization is being checked on\r\n    /// @param target Contract address corresponding to the action\r\n    /// @param functionDesc Function description used to define the action\r\n    /// @return isAuthorized Indicates whether the role is authorized to execute the action\r\n    function isRoleAuthorized(\r\n        string calldata role,\r\n        address target,\r\n        string memory functionDesc\r\n    ) external view returns (bool isAuthorized);\r\n\r\n    /// @notice Returns whether the account has been granted the role\r\n    /// @param role Role that authorization is being checked on\r\n    /// @param account Address that the role authorization is being check on\r\n    /// @return boolean Indicates whether the address has been granted the role\r\n    function hasRole(string memory role, address account)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    /// @notice Returns the role that is the admin of the specified role\r\n    /// @param role Role that the admin role is being returned for\r\n    /// @return string The admin role of the specified role\r\n    function getRoleAdmin(string memory role)\r\n        external\r\n        view\r\n        returns (string memory);\r\n\r\n    /// @return string The string \"DAO_ROLE\"\r\n    function DAO_ROLE() external view returns (string memory);\r\n}\r\n"
    },
    "contracts/GnosisWrapperFactory.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\nimport \"@openzeppelin/contracts/utils/Create2.sol\";\nimport \"./GnosisWrapper.sol\";\n\nimport \"@fractal-framework/core-contracts/contracts/ModuleFactoryBase.sol\";\n\n/// @dev GnosisWrapper Factory used to deploy Gnosis Modules\ncontract GnosisWrapperFactory is ModuleFactoryBase {\n    event GnosisWrapperCreated(address gnosisSafe);\n\n    function initialize() external initializer {\n        __initFactoryBase();\n    }\n\n    /// @dev Creates a GnosisWrapper module\n    /// @param creator The address creating the module\n    /// @param data The array of bytes used to create the module\n    /// @return address[] The array of addresses of the created module\n    function create(address creator, bytes[] calldata data)\n        external\n        override\n        returns (address[] memory)\n    {\n        address[] memory createdContracts = new address[](1);\n\n        createdContracts[0] = createGnosisWrapper(creator, data);\n\n        emit GnosisWrapperCreated(createdContracts[0]);\n\n        return createdContracts;\n    }\n\n    function createGnosisWrapper(address creator, bytes[] memory data)\n        private\n        returns (address gnosisWrapper)\n    {\n        // Create wrapper\n        gnosisWrapper = Create2.deploy(\n            0,\n            keccak256(\n                abi.encodePacked(\n                    creator,\n                    msg.sender,\n                    block.chainid,\n                    abi.decode(data[3], (bytes32)) // random salt\n                )\n            ),\n            abi.encodePacked(\n                type(ERC1967Proxy).creationCode,\n                abi.encode(address(abi.decode(data[2], (address))), \"\") // impl address\n            )\n        );\n\n        GnosisWrapper(gnosisWrapper).initialize(\n            abi.decode(data[0], (address)),\n            abi.decode(data[1], (address))\n        ); // access Control, gnosisSafe\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Create2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Create2.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\n * `CREATE2` can be used to compute in advance the address where a smart\n * contract will be deployed, which allows for interesting new mechanisms known\n * as 'counterfactual interactions'.\n *\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\n * information.\n */\nlibrary Create2 {\n    /**\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\n     * will be deployed can be known in advance via {computeAddress}.\n     *\n     * The bytecode for a contract can be obtained from Solidity with\n     * `type(contractName).creationCode`.\n     *\n     * Requirements:\n     *\n     * - `bytecode` must not be empty.\n     * - `salt` must have not been used for `bytecode` already.\n     * - the factory must have a balance of at least `amount`.\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\n     */\n    function deploy(\n        uint256 amount,\n        bytes32 salt,\n        bytes memory bytecode\n    ) internal returns (address) {\n        address addr;\n        require(address(this).balance >= amount, \"Create2: insufficient balance\");\n        require(bytecode.length != 0, \"Create2: bytecode length is zero\");\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\n        }\n        require(addr != address(0), \"Create2: Failed on deploy\");\n        return addr;\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n     * `bytecodeHash` or `salt` will result in a new destination address.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\n        return computeAddress(salt, bytecodeHash, address(this));\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\n     */\n    function computeAddress(\n        bytes32 salt,\n        bytes32 bytecodeHash,\n        address deployer\n    ) internal pure returns (address) {\n        bytes32 _data = keccak256(abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash));\n        return address(uint160(uint256(_data)));\n    }\n}\n"
    },
    "@fractal-framework/core-contracts/contracts/ModuleFactoryBase.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\";\r\nimport \"./interfaces/IModuleFactoryBase.sol\";\r\n\r\n/// @notice An abstract contract to be inherited by module contracts\r\nabstract contract ModuleFactoryBase is\r\n    IModuleFactoryBase,\r\n    Ownable,\r\n    Initializable,\r\n    ERC165Storage\r\n{\r\n    VersionInfo[] public versionControl;\r\n\r\n    /// @dev add a new version to update module users\r\n    /// @param _semanticVersion semantic version control\r\n    /// @param _frontendURI IPFS hash of the static frontend\r\n    /// @param _impl address of the impl\r\n    function addVersion(\r\n        string calldata _semanticVersion,\r\n        string calldata _frontendURI,\r\n        address _impl\r\n    ) external onlyOwner {\r\n        versionControl.push(VersionInfo(_semanticVersion, _frontendURI, _impl));\r\n        emit VersionCreated(_semanticVersion, _frontendURI, _impl);\r\n    }\r\n\r\n    /// @dev Creates a module\r\n    /// @param creator The address creating the module\r\n    /// @param data The array of bytes used to create the module\r\n    /// @return address[] Array of the created module addresses\r\n    function create(address creator, bytes[] calldata data)\r\n        external\r\n        virtual\r\n        returns (address[] memory);\r\n\r\n    /// @notice Function for initializing the contract that can only be called once\r\n    function __initFactoryBase() internal onlyInitializing {\r\n        _registerInterface(type(IModuleFactoryBase).interfaceId);\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@fractal-framework/core-contracts/contracts/interfaces/IModuleFactoryBase.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.0;\r\n\r\n/// @dev The interface to be inherited by Fractal module factories\r\ninterface IModuleFactoryBase {\r\n    event VersionCreated(\r\n        string semanticVersion,\r\n        string frontendURI,\r\n        address impl\r\n    );\r\n    struct VersionInfo {\r\n        string semanticVersion;\r\n        string frontendURI;\r\n        address impl;\r\n    }\r\n\r\n    /// @dev add a new version to update module users\r\n    /// @param _semanticVersion semantic version control\r\n    /// @param _frontendURI IPFS hash of the static frontend\r\n    /// @param _impl address of the impl\r\n    function addVersion(\r\n        string calldata _semanticVersion,\r\n        string calldata _frontendURI,\r\n        address _impl\r\n    ) external;\r\n\r\n    /// @dev Creates a module\r\n    /// @param creator The address creating the module\r\n    /// @param data The array of bytes used to create the module\r\n    /// @return address[] Array of the created module addresses\r\n    function create(address creator, bytes[] calldata data)\r\n        external\r\n        returns (address[] memory);\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/mocks/MetaFactory.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts-upgradeable/governance/utils/IVotesUpgradeable.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\nimport \"./interfaces/IMetaFactory.sol\";\nimport \"@fractal-framework/core-contracts/contracts/interfaces/IDAO.sol\";\nimport \"@fractal-framework/core-contracts/contracts/interfaces/IModuleFactoryBase.sol\";\n\n/// @notice A factory contract for deploying DAOs along with any desired modules within one transaction\n/// @dev For the Metafactory to be able to call the execute function on the created DAO, it needs to be given\n/// @dev a role that has permissions to call this function. It is critical to have the MetaFactory then revoke\n/// @dev this role within the same transaction, so that the MetaFactory cannot be used to perform arbitrary\n/// @dev execution calls on the DAO in the future.\ncontract MetaFactory is IMetaFactory, ERC165 {\n    /// @notice Creates a DAO, Access Control, and any modules specified\n    /// @param daoFactory The address of the DAO factory\n    /// @param createDAOParams The struct of parameters used for creating the DAO and Access Control contracts\n    /// @param moduleFactories Array of addresses of the module factories to call\n    /// @param moduleFactoriesBytes Array of array of bytes to pass to module factory calls\n    /// @param targets An array of addresses to target for the function calls\n    /// @param values An array of ether values to send with the function calls\n    /// @param calldatas An array of bytes defining the function calls\n    function createDAOAndExecute(\n        address daoFactory,\n        IDAOFactory.CreateDAOParams memory createDAOParams,\n        address[] calldata moduleFactories,\n        bytes[][] calldata moduleFactoriesBytes,\n        address[] calldata targets,\n        uint256[] calldata values,\n        bytes[] calldata calldatas\n    ) external {\n        createDAO(daoFactory, createDAOParams);\n        createModules(moduleFactories, moduleFactoriesBytes);\n        execute(targets, values, calldatas);\n    }\n\n    /// @notice A function for creating the DAO and Access Control contracts\n    /// @param daoFactory The address of the DAO factory\n    /// @param createDAOParams The struct of parameters used for creating the DAO and Access Control contracts\n    function createDAO(\n        address daoFactory,\n        IDAOFactory.CreateDAOParams memory createDAOParams\n    ) internal {\n        (address dao, address accessControl) = IDAOFactory(daoFactory)\n            .createDAO(msg.sender, createDAOParams);\n\n        emit DAOCreated(dao, accessControl, msg.sender);\n    }\n\n    function createModules(\n        address[] calldata moduleFactories,\n        bytes[][] calldata moduleFactoriesBytes\n    ) internal {\n        if (moduleFactories.length != moduleFactoriesBytes.length)\n            revert UnequalArrayLengths();\n\n        for (uint256 i; i < moduleFactories.length; i++) {\n            IModuleFactoryBase(moduleFactories[i]).create(\n                msg.sender,\n                moduleFactoriesBytes[i]\n            );\n        }\n    }\n\n    /// @notice A function for executing function calls to deploy an MVD, modules, and initialize them\n    /// @param targets An array of addresses to target for the function calls\n    /// @param values An array of ether values to send with the function calls\n    /// @param calldatas An array of bytes defining the function calls\n    function execute(\n        address[] calldata targets,\n        uint256[] calldata values,\n        bytes[] calldata calldatas\n    ) internal {\n        if (\n            targets.length != values.length ||\n            targets.length != calldatas.length\n        ) revert UnequalArrayLengths();\n        string\n            memory errorMessage = \"MetaFactory: call reverted without message\";\n        uint256 targetlength = targets.length;\n        for (uint256 i = 0; i < targetlength; ) {\n            (bool success, bytes memory returndata) = targets[i].call{\n                value: values[i]\n            }(calldatas[i]);\n            Address.verifyCallResult(success, returndata, errorMessage);\n            unchecked {\n                i++;\n            }\n        }\n        emit Executed(targets, values, calldatas);\n    }\n\n    /// @notice Returns whether a given interface ID is supported\n    /// @param interfaceId An interface ID bytes4 as defined by ERC-165\n    /// @return bool Indicates whether the interface is supported\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        return\n            interfaceId == type(IMetaFactory).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/governance/utils/IVotesUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/utils/IVotes.sol)\npragma solidity ^0.8.0;\n\n/**\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\n *\n * _Available since v4.5._\n */\ninterface IVotesUpgradeable {\n    /**\n     * @dev Emitted when an account changes their delegate.\n     */\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\n\n    /**\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\n     */\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\n\n    /**\n     * @dev Returns the current amount of votes that `account` has.\n     */\n    function getVotes(address account) external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of votes that `account` had at the end of a past block (`blockNumber`).\n     */\n    function getPastVotes(address account, uint256 blockNumber) external view returns (uint256);\n\n    /**\n     * @dev Returns the total supply of votes available at the end of a past block (`blockNumber`).\n     *\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\n     * vote.\n     */\n    function getPastTotalSupply(uint256 blockNumber) external view returns (uint256);\n\n    /**\n     * @dev Returns the delegate that `account` has chosen.\n     */\n    function delegates(address account) external view returns (address);\n\n    /**\n     * @dev Delegates votes from the sender to `delegatee`.\n     */\n    function delegate(address delegatee) external;\n\n    /**\n     * @dev Delegates votes from signer to `delegatee`.\n     */\n    function delegateBySig(\n        address delegatee,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n"
    },
    "contracts/mocks/interfaces/IMetaFactory.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.0;\n\nimport \"@fractal-framework/core-contracts/contracts/interfaces/IDAOFactory.sol\";\n\ninterface IMetaFactory {\n    event DAOCreated(address indexed daoAddress, address indexed accessControl, address indexed creator);\n    event Executed(address[] targets, uint256[] values, bytes[] calldatas);\n\n    error UnequalArrayLengths();\n\n  /// @notice Creates a DAO, Access Control, and any modules specified\n  /// @param daoFactory The address of the DAO factory\n  /// @param createDAOParams The struct of parameters used for creating the DAO and Access Control contracts\n  /// @param moduleFactories Array of addresses of the module factories to call\n  /// @param moduleFactoriesBytes Array of array of bytes to pass to module factory calls\n  /// @param targets An array of addresses to target for the function calls\n  /// @param values An array of ether values to send with the function calls\n  /// @param calldatas An array of bytes defining the function calls\n  function createDAOAndExecute(\n    address daoFactory,\n    IDAOFactory.CreateDAOParams memory createDAOParams,\n    address[] calldata moduleFactories,\n    bytes[][] calldata moduleFactoriesBytes,\n    address[] calldata targets,\n    uint256[] calldata values,\n    bytes[] calldata calldatas\n  ) external;\n}\n"
    },
    "@fractal-framework/core-contracts/contracts/interfaces/IDAO.sol": {
      "content": "import \"./IModuleBase.sol\";\r\n\r\n//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.0;\r\n\r\ninterface IDAO {\r\n    error Unauthorized(bytes32 role, address account);\r\n    error UnequalArrayLengths();\r\n\r\n    event Executed(address[] targets, uint256[] values, bytes[] calldatas);\r\n\r\n    /// @notice Function for initializing the Dao\r\n    /// @param _accessControl The address of the access control contract\r\n    /// @param _moduleFactory The address of the module factory\r\n    /// @param _name Name of the Dao\r\n    function initialize(address _accessControl, address _moduleFactory, string calldata _name) external;\r\n\r\n    /// @notice A function for executing function calls from the DAO\r\n    /// @param targets An array of addresses to target for the function calls\r\n    /// @param values An array of ether values to send with the function calls\r\n    /// @param calldatas An array of bytes defining the function calls\r\n    function execute(\r\n        address[] calldata targets,\r\n        uint256[] calldata values,\r\n        bytes[] calldata calldatas\r\n    ) external;\r\n}\r\n"
    },
    "@fractal-framework/core-contracts/contracts/interfaces/IDAOFactory.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.0;\r\n\r\ninterface IDAOFactory {\r\n    struct CreateDAOParams {\r\n        address daoImplementation;\r\n        address accessControlImplementation;\r\n        bytes32 salt;\r\n        string daoName;\r\n        string[] roles;\r\n        string[] rolesAdmins;\r\n        address[][] members;\r\n        string[] daoFunctionDescs;\r\n        string[][] daoActionRoles;\r\n    }\r\n\r\n    event DAOCreated(address indexed daoAddress, address accessControl, address indexed sender, address indexed creator);\r\n\r\n    /// @notice Creates a DAO with an access control contract\r\n    /// @param creator Address of the Dao Creator\r\n    /// @param createDAOParams Struct of all the parameters required to create a DAO\r\n    /// @return dao The address of the deployed DAO proxy contract\r\n    /// @return accessControl The address of the deployed access control proxy contract\r\n    function createDAO(address creator, CreateDAOParams calldata createDAOParams)\r\n        external\r\n        returns (address, address);\r\n}\r\n"
    },
    "@fractal-framework/core-contracts/contracts/DAOFactory.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\";\r\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\r\nimport \"@openzeppelin/contracts/utils/Create2.sol\";\r\n\r\nimport \"./interfaces/IDAOFactory.sol\";\r\nimport \"./interfaces/IDAOAccessControl.sol\";\r\nimport \"./interfaces/IDAO.sol\";\r\n\r\n/// @notice A factory contract for deploying DAOs with an access control contract\r\ncontract DAOFactory is IDAOFactory, ERC165Storage {\r\n    constructor() {\r\n        _registerInterface(type(IDAOFactory).interfaceId);\r\n    }\r\n\r\n    /// @notice Creates a DAO with an access control contract\r\n    /// @param creator Address of the Dao Creator\r\n    /// @param createDAOParams Struct of all the parameters required to create a DAO\r\n    /// @return dao The address of the deployed DAO proxy contract\r\n    /// @return accessControl The address of the deployed access control proxy contract\r\n    function createDAO(\r\n        address creator,\r\n        CreateDAOParams calldata createDAOParams\r\n    ) external returns (address dao, address accessControl) {\r\n        dao = _createDAO(creator, createDAOParams);\r\n        accessControl = _createAccessControl(creator, createDAOParams);\r\n\r\n        address[] memory targets = new address[](\r\n            createDAOParams.daoFunctionDescs.length\r\n        );\r\n\r\n        for (uint256 i; i < createDAOParams.daoFunctionDescs.length; ) {\r\n            targets[i] = dao;\r\n            unchecked {\r\n                i++;\r\n            }\r\n        }\r\n\r\n        IDAO(dao).initialize(\r\n            accessControl,\r\n            address(this),\r\n            createDAOParams.daoName\r\n        );\r\n        IDAOAccessControl(accessControl).initialize(\r\n            dao,\r\n            createDAOParams.roles,\r\n            createDAOParams.rolesAdmins,\r\n            createDAOParams.members,\r\n            targets,\r\n            createDAOParams.daoFunctionDescs,\r\n            createDAOParams.daoActionRoles\r\n        );\r\n\r\n        emit DAOCreated(dao, accessControl, msg.sender, creator);\r\n    }\r\n\r\n    /// @notice Creates a DAO contract\r\n    /// @param creator Address of the Dao Creator\r\n    /// @param createDAOParams Struct of all the parameters required to create a DAO\r\n    /// @return _dao The address of the deployed DAO proxy contract\r\n    function _createDAO(address creator, CreateDAOParams calldata createDAOParams)\r\n        internal\r\n        returns (address _dao)\r\n    {\r\n        _dao = Create2.deploy(\r\n            0,\r\n            keccak256(abi.encodePacked(creator, msg.sender, block.chainid, createDAOParams.salt)),\r\n            abi.encodePacked(\r\n                type(ERC1967Proxy).creationCode,\r\n                abi.encode(createDAOParams.daoImplementation, \"\")\r\n            )\r\n        );\r\n    }\r\n\r\n    /// @notice Creates a an access control contract\r\n    /// @param creator Address of the Dao Creator\r\n    /// @param createDAOParams Struct of all the parameters required to create a DAO\r\n    /// @return _accessControl The address of the deployed access control proxy contract\r\n    function _createAccessControl(address creator, CreateDAOParams memory createDAOParams)\r\n        internal\r\n        returns (address _accessControl)\r\n    {\r\n        _accessControl = Create2.deploy(\r\n            0,\r\n            keccak256(abi.encodePacked(creator, msg.sender, block.chainid, createDAOParams.salt)),\r\n            abi.encodePacked(\r\n                type(ERC1967Proxy).creationCode,\r\n                abi.encode(createDAOParams.accessControlImplementation, \"\")\r\n            )\r\n        );\r\n    }\r\n}\r\n"
    },
    "@fractal-framework/core-contracts/contracts/DAOAccessControl.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\";\r\n\r\nimport \"./interfaces/IDAOAccessControl.sol\";\r\n\r\n/// @title DAO Access Control\r\n/// @notice Use this contract for managing DAO role based permissions\r\ncontract DAOAccessControl is IDAOAccessControl, ERC165Storage, UUPSUpgradeable {\r\n    string public constant DAO_ROLE = \"DAO_ROLE\";\r\n    string public constant OPEN_ROLE = \"OPEN_ROLE\";\r\n\r\n    mapping(string => RoleData) private _roles;\r\n    mapping(address => mapping(bytes4 => string[])) private _actionsToRoles;\r\n\r\n    /// @notice Modifier that checks that an account has a specific role. Reverts\r\n    /// with a standardized message including the required role.\r\n    modifier onlyRole(string memory role) {\r\n        _checkRole(role, msg.sender);\r\n        _;\r\n    }\r\n\r\n    /// @notice Initialize DAO action and role permissions\r\n    /// @param dao Address to receive DAO role\r\n    /// @param roles What permissions are assigned to\r\n    /// @param roleAdmins Roles which have the ability to remove or add members\r\n    /// @param members Addresses to be granted the specified roles\r\n    /// @param targets Contract addresses for actions to be defined on\r\n    /// @param functionDescs Function descriptions used to define actions\r\n    /// @param actionRoles Roles being granted permission for an action\r\n    function initialize(\r\n        address dao,\r\n        string[] memory roles,\r\n        string[] memory roleAdmins,\r\n        address[][] memory members,\r\n        address[] memory targets,\r\n        string[] memory functionDescs,\r\n        string[][] memory actionRoles\r\n    ) external initializer {\r\n        if (\r\n            roles.length != roleAdmins.length ||\r\n            roles.length != members.length ||\r\n            targets.length != functionDescs.length ||\r\n            targets.length != actionRoles.length\r\n        ) revert UnequalArrayLengths();\r\n\r\n        _grantRole(DAO_ROLE, dao);\r\n        _grantRolesAndAdmins(roles, roleAdmins, members);\r\n        _addActionsRoles(targets, functionDescs, actionRoles);\r\n        __UUPSUpgradeable_init();\r\n        _registerInterface(type(IDAOAccessControl).interfaceId);\r\n    }\r\n\r\n    /// @notice Grants roles to the specified addresses and defines admin roles\r\n    /// @notice This function can only be called by the DAO\r\n    /// @param roles The roles being granted\r\n    /// @param roleAdmins The roles being granted as admins of the specified of roles\r\n    /// @param members Addresses being granted each specified role\r\n    function daoGrantRolesAndAdmins(\r\n        string[] memory roles,\r\n        string[] memory roleAdmins,\r\n        address[][] memory members\r\n    ) external onlyRole(DAO_ROLE) {\r\n        _grantRolesAndAdmins(roles, roleAdmins, members);\r\n    }\r\n\r\n    /// @notice Grants roles to the specified addresses\r\n    /// @notice This function can only be called by the DAO\r\n    /// @param roles The roles being granted\r\n    /// @param members Addresses being granted each specified role\r\n    function daoGrantRoles(string[] memory roles, address[][] memory members)\r\n        external\r\n        onlyRole(DAO_ROLE)\r\n    {\r\n        _grantRoles(roles, members);\r\n    }\r\n\r\n    /// @notice Authorizes roles to execute the specified actions\r\n    /// @notice This function can only be called by the DAO\r\n    /// @param targets The contract addresses that the action functions are implemented on\r\n    /// @param functionDescs The function descriptions used to define the actions\r\n    /// @param roles Roles being granted permission for an action\r\n    function daoAddActionsRoles(\r\n        address[] memory targets,\r\n        string[] memory functionDescs,\r\n        string[][] memory roles\r\n    ) external onlyRole(DAO_ROLE) {\r\n        _addActionsRoles(targets, functionDescs, roles);\r\n    }\r\n\r\n    /// @notice Removes autorization for roles to execute the specified actions\r\n    /// @notice This function can only be called by the DAO\r\n    /// @param targets The contract addresses that the action functions are implemented on\r\n    /// @param functionDescs The function description used to define the actions\r\n    /// @param roles Roles that action permissions are being removed on\r\n    function daoRemoveActionsRoles(\r\n        address[] memory targets,\r\n        string[] memory functionDescs,\r\n        string[][] memory roles\r\n    ) external onlyRole(DAO_ROLE) {\r\n        if (targets.length != functionDescs.length)\r\n            revert UnequalArrayLengths();\r\n        if (targets.length != roles.length) revert UnequalArrayLengths();\r\n        uint256 actionsLength = targets.length;\r\n        for (uint256 i = 0; i < actionsLength; ) {\r\n            uint256 rolesLength = roles[i].length;\r\n            for (uint256 j = 0; j < rolesLength; ) {\r\n                _removeActionRole(targets[i], functionDescs[i], roles[i][j]);\r\n                unchecked {\r\n                    j++;\r\n                }\r\n            }\r\n            unchecked {\r\n                i++;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Grants a role to the specified address\r\n    /// @notice This function can only be called by an admin of the specified role\r\n    /// @param role The role being granted\r\n    /// @param account The address being granted the specified role\r\n    function adminGrantRole(string memory role, address account)\r\n        external\r\n        onlyRole(getRoleAdmin(role))\r\n    {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /// @notice Revokes a role from the specified address\r\n    /// @notice This function can only be called by an admin of the specified role\r\n    /// @param role The role being revoked\r\n    /// @param account The address the role is being revoked from\r\n    function adminRevokeRole(string memory role, address account)\r\n        external\r\n        onlyRole(getRoleAdmin(role))\r\n    {\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /// @notice Enables an address to remove one of its own roles\r\n    /// @notice This function can only be called by the account specified\r\n    /// @param role The role being renounced\r\n    /// @param account The address renouncing the role\r\n    function userRenounceRole(string memory role, address account) external {\r\n        if (account != msg.sender) {\r\n            revert OnlySelfRenounce();\r\n        }\r\n\r\n        _revokeRole(role, account);\r\n    }  \r\n\r\n    /// @notice Checks if a caller has the permissions to execute the specific action\r\n    /// @param caller Address attempting to execute the action\r\n    /// @param target Contract address corresponding to the action\r\n    /// @param sig The function signature used to define the action\r\n    function actionIsAuthorized(\r\n        address caller,\r\n        address target,\r\n        bytes4 sig\r\n    ) external view returns (bool isAuthorized) {\r\n        string[] memory roles = _actionsToRoles[target][sig];\r\n        uint256 roleLength = roles.length;\r\n\r\n        for (uint256 i = 0; i < roleLength; ) {\r\n            if (hasRole(roles[i], caller)) {\r\n                isAuthorized = true;\r\n                break;\r\n            }\r\n            unchecked {\r\n                i++;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Returns the roles autorized to execute the specified action\r\n    /// @param target Contract address corresponding to the action\r\n    /// @param functionDesc The function description used to define the action\r\n    function getActionRoles(address target, string memory functionDesc)\r\n        external\r\n        view\r\n        returns (string[] memory roles)\r\n    {\r\n        bytes4 encodedSig = bytes4(keccak256(abi.encodePacked(functionDesc)));\r\n        return _actionsToRoles[target][encodedSig];\r\n    }\r\n\r\n    /// @notice Checks if a specific role is authorized for an action\r\n    /// @param role Role that authorization is being checked on\r\n    /// @param target Contract address corresponding to the action\r\n    /// @param functionDesc Function description used to define the action\r\n    /// @return isAuthorized Indicates whether the role is authorized to execute the action\r\n    function isRoleAuthorized(\r\n        string calldata role,\r\n        address target,\r\n        string memory functionDesc\r\n    ) external view returns (bool isAuthorized) {\r\n        bytes4 encodedSig = bytes4(keccak256(abi.encodePacked(functionDesc)));\r\n        string[] memory roles = _actionsToRoles[target][encodedSig];\r\n        uint256 rolesLength = roles.length;\r\n\r\n        for (uint256 i = 0; i < rolesLength; ) {\r\n            if (\r\n                keccak256(abi.encodePacked(role)) ==\r\n                keccak256(abi.encodePacked(roles[i]))\r\n            ) {\r\n                isAuthorized = true;\r\n                break;\r\n            }\r\n            unchecked {\r\n                i++;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Returns whether the account has been granted the role\r\n    /// @param role Role that authorization is being checked on\r\n    /// @param account Address that the role authorization is being check on\r\n    /// @return boolean Indicates whether the address has been granted the role\r\n    function hasRole(string memory role, address account)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        if (\r\n            keccak256(bytes(role)) ==\r\n            keccak256(bytes(OPEN_ROLE))\r\n        ) {\r\n            return true;\r\n        } else {\r\n            return _roles[role].members[account];\r\n        }\r\n    }\r\n\r\n    /// @notice Returns the role that is the admin of the specified role\r\n    /// @param role Role that the admin role is being returned for\r\n    /// @return string The admin role of the specified role\r\n    function getRoleAdmin(string memory role)\r\n        public\r\n        view\r\n        returns (string memory)\r\n    {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /// @notice Sets a role as the admin of another role\r\n    /// @param role The role the admin is being set for\r\n    /// @param adminRole The role that is being assigned as an admin\r\n    function _setRoleAdmin(string memory role, string memory adminRole)\r\n        internal\r\n    {\r\n        string memory previousAdminRole = getRoleAdmin(role);\r\n        _roles[role].adminRole = adminRole;\r\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\r\n    }\r\n\r\n    /// @notice Grants a role to the specified address\r\n    /// @param role The role being granted\r\n    /// @param account The address being granted the specified role\r\n    function _grantRole(string memory role, address account) internal {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].members[account] = true;\r\n            emit RoleGranted(role, account, msg.sender);\r\n        }\r\n    }\r\n\r\n    /// @notice Revokes a role from the specified address\r\n    /// @param role The role being revoked\r\n    /// @param account The address the role is being revoked from\r\n    function _revokeRole(string memory role, address account) internal {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].members[account] = false;\r\n            emit RoleRevoked(role, account, msg.sender);\r\n        }\r\n    }\r\n\r\n    /// @notice Grants roles to the specified addresses and defines admin roles\r\n    /// @param roles The roles being granted\r\n    /// @param roleAdmins The roles being granted as admins of the specified of roles\r\n    /// @param members Addresses being granted each specified role\r\n    function _grantRolesAndAdmins(\r\n        string[] memory roles,\r\n        string[] memory roleAdmins,\r\n        address[][] memory members\r\n    ) internal {\r\n        if (roles.length != roleAdmins.length) revert UnequalArrayLengths();\r\n        if (roles.length != members.length) revert UnequalArrayLengths();\r\n\r\n        uint256 rolesLength = roles.length;\r\n        for (uint256 i = 0; i < rolesLength; ) {\r\n            _setRoleAdmin(roles[i], roleAdmins[i]);\r\n\r\n            uint256 membersLength = members[i].length;\r\n            for (uint256 j = 0; j < membersLength; ) {\r\n                _grantRole(roles[i], members[i][j]);\r\n                unchecked {\r\n                    j++;\r\n                }\r\n            }\r\n            unchecked {\r\n                i++;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Grants roles to the specified addresses and defines admin roles\r\n    /// @param roles The roles being granted\r\n    /// @param members Addresses being granted each specified role\r\n    function _grantRoles(string[] memory roles, address[][] memory members)\r\n        internal\r\n    {\r\n        if (roles.length != members.length) revert UnequalArrayLengths();\r\n\r\n        uint256 rolesLength = roles.length;\r\n        for (uint256 i = 0; i < rolesLength; ) {\r\n            uint256 membersLength = members[i].length;\r\n            for (uint256 j = 0; j < membersLength; ) {\r\n                _grantRole(roles[i], members[i][j]);\r\n                unchecked {\r\n                    j++;\r\n                }\r\n            }\r\n            unchecked {\r\n                i++;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Authorizes roles to execute the specified actions\r\n    /// @param targets The contract addresses that the action functions are implemented on\r\n    /// @param functionDescs The function descriptions used to define the actions\r\n    /// @param roles Roles being granted permission for an action\r\n    function _addActionsRoles(\r\n        address[] memory targets,\r\n        string[] memory functionDescs,\r\n        string[][] memory roles\r\n    ) internal {\r\n        if (targets.length != functionDescs.length)\r\n            revert UnequalArrayLengths();\r\n        if (targets.length != roles.length) revert UnequalArrayLengths();\r\n\r\n        uint256 targetsLength = targets.length;\r\n        for (uint256 i = 0; i < targetsLength; ) {\r\n            uint256 rolesLength = roles[i].length;\r\n            for (uint256 j = 0; j < rolesLength; ) {\r\n                _addActionRole(targets[i], functionDescs[i], roles[i][j]);\r\n                unchecked {\r\n                    j++;\r\n                }\r\n            }\r\n            unchecked {\r\n                i++;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Authorizes a role to execute the specified action\r\n    /// @param target The contract address that the action function is implemented on\r\n    /// @param functionDesc The function description used to define the action\r\n    /// @param role Role being granted permission for an action\r\n    function _addActionRole(\r\n        address target,\r\n        string memory functionDesc,\r\n        string memory role\r\n    ) internal {\r\n        bytes4 encodedSig = bytes4(keccak256(abi.encodePacked(functionDesc)));\r\n        _actionsToRoles[target][encodedSig].push(role);\r\n\r\n        emit ActionRoleAdded(target, functionDesc, encodedSig, role);\r\n    }\r\n\r\n    /// @notice Removes authorization of a role to execute the specified action\r\n    /// @param target The contract address that the action function is implemented on\r\n    /// @param functionDesc The function description used to define the action\r\n    /// @param role Role that the action authorization is being removed on\r\n    function _removeActionRole(\r\n        address target,\r\n        string memory functionDesc,\r\n        string memory role\r\n    ) internal {\r\n        bytes4 encodedSig = bytes4(keccak256(abi.encodePacked(functionDesc)));\r\n        uint256 rolesLength = _actionsToRoles[target][encodedSig].length;\r\n        for (uint256 i = 0; i < rolesLength; ) {\r\n            if (\r\n                keccak256(\r\n                    abi.encodePacked(_actionsToRoles[target][encodedSig][i])\r\n                ) == keccak256(abi.encodePacked(role))\r\n            ) {\r\n                _actionsToRoles[target][encodedSig][i] = _actionsToRoles[\r\n                    target\r\n                ][encodedSig][rolesLength - 1];\r\n                _actionsToRoles[target][encodedSig].pop();\r\n\r\n                emit ActionRoleRemoved(target, functionDesc, encodedSig, role);\r\n\r\n                break;\r\n            }\r\n            unchecked {\r\n                i++;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Reverts when msg.sender is not authorized to upgrade the contract\r\n    /// @notice Only addresses that have the DAO_ROLE role are authorized\r\n    /// @notice Called by upgradeTo and upgradeToAndCall\r\n    /// @param newImplementation New implementation contract address being upgraded to\r\n    function _authorizeUpgrade(address newImplementation)\r\n        internal\r\n        override\r\n        onlyRole(DAO_ROLE)\r\n    {}\r\n\r\n    /// @notice Reverts with a standard message if account is missing role\r\n    /// @param role Role being checked\r\n    /// @param account Address that role is being checked on\r\n    function _checkRole(string memory role, address account) internal view {\r\n        if (!hasRole(role, account)) {\r\n            revert MissingRole(account, role);\r\n        }\r\n    }\r\n}\r\n"
    },
    "@fractal-framework/core-contracts/contracts/DAO.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\n\r\nimport \"./interfaces/IDAO.sol\";\r\nimport \"./ModuleBase.sol\";\r\n\r\n/// @notice A minimum viable DAO contract\r\ncontract DAO is IDAO, ModuleBase {\r\n    /// @notice Function for initializing the contract that can only be called once\r\n    /// @param _accessControl The address of the access control contract\r\n    /// @param _moduleFactory The address of the module factory\r\n    /// @param _name Name of the Dao\r\n    function initialize(address _accessControl, address _moduleFactory, string calldata _name) external initializer {\r\n        __initBase(_accessControl, _moduleFactory, _name);\r\n        _registerInterface(type(IDAO).interfaceId);\r\n    }\r\n\r\n    /// @notice A function for executing function calls from the DAO\r\n    /// @param targets An array of addresses to target for the function calls\r\n    /// @param values An array of ether values to send with the function calls\r\n    /// @param calldatas An array of bytes defining the function calls\r\n    function execute(\r\n        address[] calldata targets,\r\n        uint256[] calldata values,\r\n        bytes[] calldata calldatas\r\n    ) external authorized {\r\n        if (\r\n            targets.length != values.length ||\r\n            targets.length != calldatas.length\r\n        ) revert UnequalArrayLengths();\r\n        string memory errorMessage = \"DAO: call reverted without message\";\r\n        uint256 targetlength = targets.length;\r\n        for (uint256 i = 0; i < targetlength; ) {\r\n            (bool success, bytes memory returndata) = targets[i].call{\r\n                value: values[i]\r\n            }(calldatas[i]);\r\n            Address.verifyCallResult(success, returndata, errorMessage);\r\n            unchecked {\r\n                i++;\r\n            }\r\n        }\r\n        emit Executed(targets, values, calldatas);\r\n    }\r\n}\r\n"
    },
    "contracts/hardhat-dependency-compiler/@fractal-framework/core-contracts/contracts/DAO.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@fractal-framework/core-contracts/contracts/DAO.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@fractal-framework/core-contracts/contracts/DAOAccessControl.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@fractal-framework/core-contracts/contracts/DAOAccessControl.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@fractal-framework/core-contracts/contracts/DAOFactory.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@fractal-framework/core-contracts/contracts/DAOFactory.sol';\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}